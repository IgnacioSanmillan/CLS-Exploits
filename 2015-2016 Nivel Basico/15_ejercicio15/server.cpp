#define WIN32_LEAN_AND_MEAN


#include <WinSock2.h>
#include <WS2tcpip.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctime>
#include <iostream>
#include <cstdlib>

// link with Ws2_32.lib
#pragma comment(lib, "Ws2_32.lib")

#define DEFAULT_PORT "27015"
#define DEFAULT_BUFFER_LENGTH	512

int main() {

	WSADATA wsaData;
	srand(time(NULL));
	char msg[DEFAULT_BUFFER_LENGTH];
	char recvbuf[DEFAULT_BUFFER_LENGTH];
	int iSendResult;
	int numero = 0;
	int resul=0,value=0,value2=0,pointer;
	char respuesta[20];
	char admin[20];
	int * p_random;
	int random =std::rand();
	//LPVOID(*foo3)(LPVOID, SIZE_T, int, int);
	void * foo3;
	FILE *f1;


	foo3 = (LPVOID(*)(LPVOID, SIZE_T, int, int))&VirtualAlloc;
	p_random = &random;
	resul=GetPrivateProfileStringA((LPCSTR)"users", (LPCSTR)"admin", (LPCSTR)"fail", (LPSTR)admin, (DWORD)20, (LPCSTR)".\\server.ini");
	if (resul == 0) { exit(1); }

	// Initialize Winsock
	int iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
	if(iResult != 0)
	{
		printf("WSAStartup failed: %d\n", iResult);
		return 1;
	}

	struct addrinfo	*result = NULL,
					hints;

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_INET;		// Internet address family is unspecified so that either an IPv6 or IPv4 address can be returned
	hints.ai_socktype = SOCK_STREAM;	// Requests the socket type to be a stream socket for the TCP protocol
	hints.ai_protocol = IPPROTO_TCP;
	hints.ai_flags = AI_PASSIVE;

	// Resolve the local address and port to be used by the server
	iResult = getaddrinfo(NULL, DEFAULT_PORT, &hints, &result);
	if (iResult != 0)
	{
		printf("getaddrinfo failed: %d\n", iResult);
		WSACleanup();
		return 1;
	}

	SOCKET ListenSocket = INVALID_SOCKET;

	// Create a SOCKET for the server to listen for client connections
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);

	if (ListenSocket == INVALID_SOCKET)
	{
		printf("Error at socket(): %d\n", WSAGetLastError());
		freeaddrinfo(result);
		WSACleanup();
		return 1;
	}

	// Setup the TCP listening socket
	iResult = bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);

	if (iResult == SOCKET_ERROR)
	{
		printf("bind failed: %d", WSAGetLastError());
		freeaddrinfo(result);
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	freeaddrinfo(result);

	// To listen on a socket
	if ( listen(ListenSocket, SOMAXCONN) == SOCKET_ERROR)
	{
		printf("listen failed: %d\n", WSAGetLastError());
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}
	printf("listening at port: %s\n", DEFAULT_PORT);

	SOCKET ClientSocket;

	ClientSocket = INVALID_SOCKET;

	// Accept a client socket
	ClientSocket = accept(ListenSocket, NULL, NULL);

	if (ClientSocket == INVALID_SOCKET)
	{
		printf("accept failed: %d\n", WSAGetLastError());
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}
	
	// reveice until the client shutdown the connection
	do {
		iResult = recv(ClientSocket, recvbuf, DEFAULT_BUFFER_LENGTH, 0);
		if (iResult > 0)
		{
			printf("connected at port: %s\n", DEFAULT_PORT);

			strncpy(msg, recvbuf, iResult);
			if (numero == 0)
			{
					char *user = strtok(msg, " ");
					printf("validating user %s\n", user);

					resul = GetPrivateProfileStringA((LPCSTR)"users", (LPCSTR) msg, (LPCSTR)"", (LPSTR)respuesta, (DWORD)20, (LPCSTR)".\\server.ini");
					if (resul == 0) 
					{ 
						printf("%s not a valid user \n", msg);
						exit(1); }
					else {
						printf("%s valid user \n", msg);

					}
					char *token = strtok(NULL, " ");
					printf("validating pass %s\n", token);
					printf("respuesta %s\n", respuesta);

					resul = strncmp(token, respuesta, 10);
					if (resul != 0) {
						printf("wrong pass: %s\n", token);
						exit(1);
					}
					else {
						printf("welcome: %s\n", user);

						printf("cookie: %08x\n",random );
						memcpy(recvbuf+4, "Buenasss.......", 10);
						memcpy(recvbuf, p_random, 4);

						iSendResult = send(ClientSocket, recvbuf, 15, 0);

					}
			}
			else
			{
				if (memcmp(recvbuf, p_random, 4) == 0) {
					if (numero <= 5) {
						memcpy(&value, recvbuf + 4, 4);
						memcpy(&value2, recvbuf + 8, 4);
						printf("received: %08x\n", value);
						printf("received: %08x\n", value2);
						pointer = (int)p_random + value2;
						printf("pointer: %08x\n", pointer);

						memcpy(recvbuf, (void *)pointer, 4);
						iSendResult = send(ClientSocket, recvbuf, 4, 0);

					}
					if (numero == 6) {
						memcpy(msg+value2, recvbuf, value);
						iSendResult = send(ClientSocket, recvbuf, iResult, 0);

					}
					if (numero >= 7) {
						printf("Bye ..\n");
						return 1;
					}
				}
				else { 
					printf("Bye ..\n");
					return 1; 
				}
			}

			printf("Received: %s\n", msg);

			if (iSendResult == SOCKET_ERROR)
			{
				printf("send failed: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}

			printf("Bytes sent: %ld\n", iSendResult);
		}
		else if (iResult == 0)
			printf("Connection closed\n");
		else
		{
			printf("recv failed: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			//return 1;
		}
		numero += 1;
	} while (iResult > 0);

	// Free the resouces
	closesocket(ListenSocket);
	WSACleanup();

	getchar();
	return 0;
}